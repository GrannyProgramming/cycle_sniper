//@version=5
indicator("Cycle Sniper without SQZMOM", overlay=true, format=format.price, precision=3, max_bars_back=5000)

// ============================================================================
// 1. Inputs & Constants
// ============================================================================
groupMain = "Main Settings"
useTickerSpecific = input.bool(true, "Ticker Presets", group=groupMain)
show_future_dcl   = input.bool(true, "Show Future Cycle Lows", group=groupMain)
show_hist_trough  = input.bool(true, "Show Historical Cycle Lows Predictions", group=groupMain)

// ----- Confirmation Signals -----
groupSignals = "Confirmation Signals"
show_LW    = input.bool(true, "Show Larry Williams Signals", group=groupSignals)
show_FRAMA = input.bool(true, "Show FRAMA Indicator", group=groupSignals)
show_T3Exit = input.bool(true, "Show T3 Exit Signal", group=groupSignals)
// SQZMOM confirmation toggle removed (parked)

// ----- Manual Settings (formerly DCL Analysis) -----
groupManual = "MANUAL SETTINGS"
src   = close
dpr   = input.int(7, "DRO period", minval=5, group=groupManual)
sig_in = input.string("NONE", "Harmonic Period", options=["20 Day", "40 Day", "60 Day", "80 Day", "20 Week", "NONE"], group=groupManual)

// ----- FRAMA Settings -----
groupFRAMA = "FRAMA Settings"
framaFC = input.int(1, "FRAMA Fast MA", minval=1, group=groupFRAMA)
framaSC = input.int(200, "FRAMA Slow MA", minval=1, group=groupFRAMA)

// ----- T3 Normalisation for WCL Momentum Checking (Hidden) -----
groupT3 = "T3 Normalised (Hidden)"
t3Length    = input.int(2, "T3 Calc Period", group=groupT3)
t3Source    = input.source(close, "T3 Calc Source", group=groupT3)
t3VolFactor = input.float(0.7, "T3 Volume Factor", group=groupT3)
t3NormPeriod= input.int(50, "T3 Normalisation Period", minval=1, group=groupT3)

// ----- Tooltip Settings (Keep at Bottom) -----
groupTooltip = "Tooltip Settings"
position_input = input.string("bottom_right", "Tooltip Position", 
     options=["top_left", "top_center", "top_right", 
              "middle_left", "middle_right", 
              "bottom_left", "bottom_center", 
              "bottom_right"], 
     group=groupTooltip)
size_input = input.string("small", "Text Size", 
     options=["tiny", "small", "normal", "large", "huge"], 
     group=groupTooltip)

// Fixed maximum array size and decimals
var int MAX_ARRAY_SIZE = 1000000
var int DECIMALS = 2

// ============================================================================
// Global variables for low-finding logic
// ============================================================================
var array<int>   low_indices    = array.new_int()
var array<float> low_distances  = array.new_float()
var float        avg_distance   = na

// ============================================================================
// 2. Ticker Presets: Stored Values vs Manual Handling
// ============================================================================
var string ticker_harmonic = ""
var float  ticker_dro      = 0.0
if useTickerSpecific
    if syminfo.ticker == "BTCUSD"
        ticker_dro := 6
        ticker_harmonic := "80 Day"
    else if syminfo.ticker == "GOLD"
        ticker_dro := 9
        ticker_harmonic := "20 Day"
    else if syminfo.ticker == "NDQ"
        ticker_dro := 7
        ticker_harmonic := "40 Day"
    else if syminfo.ticker == "OIL"
        ticker_dro := 8
        ticker_harmonic := "40 Day"
    else
        ticker_dro := na
        ticker_harmonic := ""
        if barstate.islast
            label.new(bar_index, high, text="No valid ticker found for Ticker Presets", style=label.style_label_up, color=color.red, textcolor=color.white, size=size.large)

// ============================================================================
// 2.5. Helper Function: Convert Cycle String to Number of Bars
// ============================================================================
f_getCycleBars(string cycleText, float avg) =>
    if cycleText == "20 Day"
        avg
    else if cycleText == "40 Day"
        avg * 2
    else if cycleText == "60 Day"
        avg * 3
    else if cycleText == "80 Day"
        avg * 4
    else if cycleText == "20 Week"
        avg * 8
    else
        na

// ============================================================================
// 3. Helper Functions (Existing Functions)
// ============================================================================
f_t3(src, length, vFactor) =>
    e1 = ta.ema(src, length)
    e2 = ta.ema(e1, length)
    e3 = ta.ema(e2, length)
    e4 = ta.ema(e3, length)
    e5 = ta.ema(e4, length)
    e6 = ta.ema(e5, length)
    c1 = -vFactor * vFactor * vFactor
    c2 =  3 * vFactor * vFactor + 3 * vFactor * vFactor * vFactor
    c3 = -6 * vFactor * vFactor - 3 * vFactor - vFactor * vFactor * vFactor
    c4 =  1 + 3 * vFactor + 3 * vFactor * vFactor + vFactor * vFactor * vFactor
    c1 * e6 + c2 * e5 + c3 * e4 + c4 * e3

f_drawFuturePrediction(float xlo, float wavelength, int baseIndex, color lineColor, color fillColor, int tolerance) =>
    float half_width = wavelength / 4.0
    int pred = na
    if not na(baseIndex)
        pred := baseIndex
    else
        pred := bar_index + (xlo < wavelength ? int(wavelength - xlo) : 0)
    int left_b  = pred - int(half_width) - tolerance
    int right_b = pred + int(half_width) + tolerance
    float top_val = ta.highest(high, 500)
    float bottom_val = ta.lowest(low, 500)
    line l_left = line.new(left_b, top_val, left_b, bottom_val, xloc.bar_index, extend=extend.none, color=lineColor, style=line.style_solid)
    line l_right = line.new(right_b, top_val, right_b, bottom_val, xloc.bar_index, extend=extend.none, color=lineColor, style=line.style_solid)
    linefill lf = linefill.new(l_left, l_right, color=fillColor)
    [pred, left_b, right_b, l_left, l_right, lf]

pos_map(position_string) =>
    switch position_string
        "top_left" => position.top_left
        "top_center" => position.top_center
        "top_right" => position.top_right
        "middle_left" => position.middle_left
        "middle_right" => position.middle_right
        "bottom_left" => position.bottom_left
        "bottom_center" => position.bottom_center
        "bottom_right" => position.bottom_right
        => position.bottom_right

size_map(size_string) =>
    switch size_string
        "tiny" => size.tiny
        "small" => size.small
        "normal" => size.normal
        "large" => size.large
        "huge" => size.huge
        => size.small

truncate(number) =>
    factor = math.pow(10, DECIMALS)
    math.floor(number * factor) / factor

// Bandpass Filter Function
bpf(series, float Period, Delta) =>
    float tmpbpf = na
    if not na(Period) and Period >= 2
        beta = math.cos(math.pi * (360 / Period) / 180)
        gamma = 1 / math.cos(math.pi * (720 * Delta / Period) / 180)
        alpha = gamma - math.sqrt(gamma * gamma - 1)
        tmpbpf := 0.5 * (1 - alpha) * (series - series[2]) + beta * (1 + alpha) * nz(tmpbpf[1]) - alpha * nz(tmpbpf[2])
    tmpbpf

// ============================================================================
// 4. DRO Low-Finding Logic (Cycle Timing Windows Calculation)
// ============================================================================
int usedZigPeriod = useTickerSpecific and not na(ticker_dro) ? int(ticker_dro) : dpr
var int dir1 = 0
ppo = 100 * (ta.ema(src, 3) - ta.ema(src, 50)) / ta.ema(src, 50)
float highs_val2 = ta.highestbars(ppo, usedZigPeriod) == 0 ? ppo : na
float lows_val2  = ta.lowestbars(ppo, usedZigPeriod) == 0 ? ppo : na

dir1 := if not na(highs_val2) and na(lows_val2)
    1
else if not na(lows_val2) and na(highs_val2)
    -1
else
    dir1[1]

bool dir1changed = dir1 != nz(dir1[1])
if not na(highs_val2) or not na(lows_val2)
    if dir1changed and dir1 == -1
        array.unshift(low_indices, bar_index)
        if array.size(low_indices) > 1
            distance = array.get(low_indices, 0) - array.get(low_indices, 1)
            array.unshift(low_distances, distance)
        if array.size(low_indices) > MAX_ARRAY_SIZE
            array.pop(low_indices)
        if array.size(low_distances) > MAX_ARRAY_SIZE
            array.pop(low_distances)

avg_distance := array.size(low_distances) > 0 ? array.sum(low_distances) / array.size(low_distances) : na

// ============================================================================
// 5. Harmonic Period Calculations Based on avg_distance
// ============================================================================
period20Day  = avg_distance
period40Day  = avg_distance * 2
period60Day  = avg_distance * 3
period80Day  = avg_distance * 4
period20Week = period80Day * 2

period20Day  := (na(period20Day)  or period20Day < 2)  ? 2 : period20Day
period40Day  := (na(period40Day)  or period40Day < 2)  ? 2 : period40Day
period60Day  := (na(period60Day)  or period60Day < 2)  ? 2 : period60Day
period80Day  := (na(period80Day)  or period80Day < 2)  ? 2 : period80Day
period20Week := (na(period20Week) or period20Week < 2) ? 2 : period20Week

float period_out = na
if useTickerSpecific
    if ticker_harmonic == "20 Day"
        period_out := period20Day
    else if ticker_harmonic == "40 Day"
        period_out := period40Day
    else if ticker_harmonic == "60 Day"
        period_out := period60Day
    else if ticker_harmonic == "80 Day"
        period_out := period80Day
    else if ticker_harmonic == "20 Week"
        period_out := period20Week
    else
        period_out := na
else
    if sig_in == "20 Day"
        period_out := period20Day
    else if sig_in == "40 Day"
        period_out := period40Day
    else if sig_in == "60 Day"
        period_out := period60Day
    else if sig_in == "80 Day"
        period_out := period80Day
    else if sig_in == "20 Week"
        period_out := period20Week
    else
        period_out := na

float finalHarmonic = useTickerSpecific and (ticker_harmonic != "") ? f_getCycleBars(ticker_harmonic, avg_distance) : f_getCycleBars(sig_in, avg_distance)

// ============================================================================
// 6. Harmonic Analysis – Compute the Oscillator (sig_out)
// ============================================================================
source_bpf = hl2
BPF20Day   = bpf(source_bpf, period20Day, 0.02)
BPF40Day   = bpf(source_bpf, period40Day, 0.02)
BPF60Day   = bpf(source_bpf, period60Day, 0.02)
BPF80Day   = bpf(source_bpf, period80Day, 0.02)
BPF20Week  = bpf(source_bpf, period20Week, 0.02)

float sig_out =
     sig_in == "20 Day"  ? BPF20Day  :
     sig_in == "40 Day"  ? BPF40Day  :
     sig_in == "60 Day"  ? BPF60Day  :
     sig_in == "80 Day"  ? BPF80Day  :
     sig_in == "20 Week" ? BPF20Week : na

float used_sig_out = useTickerSpecific ? bpf(source_bpf, finalHarmonic, 0.02) : sig_out

// ============================================================================
// 7. Highs/Lows Detection (Using used_sig_out)
// ============================================================================
bool hi =
     not na(used_sig_out[2]) and not na(used_sig_out[1]) and not na(used_sig_out) and 
     (used_sig_out[2] < used_sig_out[1]) and (used_sig_out[1] > used_sig_out) ? true : false

bool lo =
     not na(used_sig_out[2]) and not na(used_sig_out[1]) and not na(used_sig_out) and 
     (used_sig_out[2] > used_sig_out[1]) and (used_sig_out[1] < used_sig_out) ? true : false

float xhi = ta.barssince(hi)
float xlo = ta.barssince(lo)
float wavelength = math.round(math.abs(xhi - xlo) * 2)
next_peak   = -math.abs(xhi - wavelength)
next_trough = -math.abs(xlo - wavelength)

// ============================================================================
// 8. Amplitude Calculations
// ============================================================================
bool valid_period_out = not na(finalHarmonic) and finalHarmonic > 0
float bpfphi = valid_period_out ? ta.highest(used_sig_out, math.max(1, math.round(finalHarmonic))) : na
float bpfplo = valid_period_out ? ta.lowest(used_sig_out, math.max(1, math.round(finalHarmonic))) : na
float tot_amp = bpfphi - bpfplo

// ============================================================================
// 9. Build Tooltip Text for Harmonic Analysis (Simplified)
// ============================================================================
string manualWarning =
     useTickerSpecific and (ticker_harmonic == "" or na(ticker_dro)) ? "\n⚠ Manual input required for ticker presets" : ""

string cycleLabel =
     useTickerSpecific ? ticker_harmonic + "/" + str.tostring(truncate(period_out)) :
     sig_in + "/" + str.tostring(truncate(period_out))

labeltt = "🔄 Cycle: " + cycleLabel
labeltt += "\n📏 Period (⊺): ~" + str.tostring(math.abs(xhi - xlo)) + " bars"
labeltt += "\n🌊 Wavelength (λ): ~" + str.tostring(wavelength) + " bars"
labeltt += "\n⚖ Delta Amplitude: " + str.tostring(truncate(tot_amp))
labeltt += "\n📈 Peak: " + str.tostring(truncate(bpfphi)) + ", " + str.tostring(xhi) + " bars ago"
labeltt += "\n📉 Trough: " + str.tostring(truncate(bpfplo)) + ", " + str.tostring(xlo) + " bars ago"
labeltt += "\n\n🔮 Estimates: " + ((-next_peak < -next_trough) ? "Bullish🟢" : "Bearish🔴")
labeltt += "\n📈 Next Peak: " + str.tostring(-next_peak) + "ish bars"
labeltt += "\n🔀 Next Node: " + str.tostring(math.abs(xhi - xlo) - ta.barssince(ta.cross(used_sig_out, 0))) + "ish bars"
labeltt += "\n📉 Next Trough: " + str.tostring(-next_trough) + "ish bars" + manualWarning

// ============================================================================
// 10. Display Tooltip in a Table
// ============================================================================
table_position = pos_map(position_input)
text_size_value = size_map(size_input)
var table TickerTable = na
if barstate.islast
    if not na(TickerTable)
        table.delete(TickerTable)
    TickerTable := table.new(table_position, 1, 1)
    table.cell(TickerTable, 0, 0, text="Cycle Timing Info:\n" + labeltt, 
         text_size=text_size_value, text_color=color.white, bgcolor=color.new(color.black, 50), tooltip=labeltt)

// ============================================================================
// 11. Future Daily Cycle Prediction (Persistent Active Prediction)
// ============================================================================
var int activePredDaily       = na
var int activeLeftDaily       = na
var int activeRightDaily      = na
var line activeLineLeftDaily  = na
var line activeLineRightDaily = na
var linefill activeLineFillDaily = na

int last_trough = (array.size(low_indices) > 0) ? array.get(low_indices, 0) : na

if show_future_dcl and not na(wavelength) and not na(last_trough)
    float half_width = wavelength / 4.0
    float orig_range = 2 * half_width        
    int toleranceBars = int(orig_range * 0.1) 
    if na(activePredDaily)
        activePredDaily := last_trough + int(wavelength)
        activeLeftDaily := activePredDaily - int(half_width) - toleranceBars
        activeRightDaily := activePredDaily + int(half_width) + toleranceBars
        [temp1, temp2, temp3, temp4, temp5, temp6] = f_drawFuturePrediction(xlo, wavelength, activePredDaily, color.new(color.green, 0), color.new(color.green, 85), toleranceBars)
        activeLineLeftDaily := temp4
        activeLineRightDaily := temp5
        activeLineFillDaily := temp6
    else
        if bar_index >= activeRightDaily
            activePredDaily := last_trough + int(wavelength)
            activeLeftDaily := activePredDaily - int(half_width) - toleranceBars
            activeRightDaily := activePredDaily + int(half_width) + toleranceBars
            line.delete(activeLineLeftDaily)
            line.delete(activeLineRightDaily)
            linefill.delete(activeLineFillDaily)
            [temp1, temp2, temp3, temp4, temp5, temp6] = f_drawFuturePrediction(xlo, wavelength, activePredDaily, color.new(color.green, 0), color.new(color.green, 85), toleranceBars)
            activeLineLeftDaily := temp4
            activeLineRightDaily := temp5
            activeLineFillDaily := temp6

// ============================================================================
// 12. Future Weekly Cycle Prediction (Persistent Active Prediction)
// ============================================================================
bool hi_week =
     not na(BPF20Week[2]) and not na(BPF20Week[1]) and not na(BPF20Week) and (BPF20Week[2] < BPF20Week[1]) and (BPF20Week[1] > BPF20Week)
     ? true :
     false

bool lo_week =
     not na(BPF20Week[2]) and not na(BPF20Week[1]) and not na(BPF20Week) and (BPF20Week[2] > BPF20Week[1]) and (BPF20Week[1] < BPF20Week)
     ? true :
     false

float xhi_week = ta.barssince(hi_week)
float xlo_week = ta.barssince(lo_week)
float wavelength_week = math.round(math.abs(xhi_week - xlo_week) * 2)
int baseIndex_week = lo_week ? bar_index : na

var int activePredWeekly       = na
var int activeLeftWeekly       = na
var int activeRightWeekly      = na
var line activeLineLeftWeekly  = na
var line activeLineRightWeekly = na
var linefill activeLineFillWeekly = na

if show_future_dcl and not na(wavelength_week) and not na(xlo_week)
    float half_width_week = wavelength_week / 4.0
    float orig_range_week = 2 * half_width_week
    int toleranceBars_week = int(orig_range_week * 0.1)
    if na(activePredWeekly)
        [tempW1, tempW2, tempW3, tempW4, tempW5, tempW6] = f_drawFuturePrediction(xlo_week, wavelength_week, baseIndex_week, color.new(color.blue, 0), color.new(color.blue, 85), toleranceBars_week)
        activePredWeekly := tempW1
        activeLeftWeekly := tempW2
        activeRightWeekly := tempW3
        activeLineLeftWeekly := tempW4
        activeLineRightWeekly := tempW5
        activeLineFillWeekly := tempW6
    else
        if bar_index >= activeRightWeekly
            activePredWeekly := na
            activeLeftWeekly := na
            activeRightWeekly := na
            line.delete(activeLineLeftWeekly)
            line.delete(activeLineRightWeekly)
            linefill.delete(activeLineFillWeekly)

// ============================================================================
// 13. Historical Trough Estimate – Plot Background Color
// ============================================================================
bg_color_val = show_hist_trough ? color.new(color.green, lo ? 75 : 100) : na
bgcolor(bg_color_val, title="Trough Estimate", offset=int(wavelength))

// ============================================================================
// 14. Larry Williams Indicator Implementation
// ============================================================================
ma9 = ta.ema(close, 9)
plot(show_LW ? ma9 : na, linewidth=1, color=color.white, title="LW EMA")
above_ma9 = ma9[1] < ma9
lwLong  = not above_ma9[3] and not above_ma9[2] and not above_ma9[1] and above_ma9
plotshape(show_LW and lwLong, title="Larry Williams Long Signal", style=shape.triangleup, location=location.belowbar, size=size.tiny, color=color.lime, text="9.1")

lwShort = above_ma9[3] and above_ma9[2] and above_ma9[1] and not above_ma9
plotshape(show_LW and lwShort, title="Larry Williams Short Signal", style=shape.triangledown, location=location.abovebar, size=size.tiny, color=color.red, text="9.1")

// ============================================================================
// 15. FRAMA Indicator Implementation (Dual FRAMA for DCL and WCL)
// ============================================================================
float frama_period_dcl = finalHarmonic
float frama_period_wcl = f_getCycleBars("20 Week", avg_distance)
frama_period_dcl := (na(frama_period_dcl) or frama_period_dcl < 2) ? 2 : frama_period_dcl
frama_period_wcl := (na(frama_period_wcl) or frama_period_wcl < 2) ? 2 : frama_period_wcl

var float frama_val_dcl = src
var float frama_val_wcl = src

float w = -4.6  // constant for FRAMA smoothing factor

// Daily Cycle FRAMA Calculation
int len_dcl = math.round(frama_period_dcl)
float len1_dcl = len_dcl / 2.0
float H1_dcl = ta.highest(high, int(len1_dcl))
float L1_dcl = ta.lowest(low, int(len1_dcl))
float N1_dcl = (H1_dcl - L1_dcl) / len1_dcl
float H2_dcl = ta.highest(high, int(len1_dcl))[int(len1_dcl)]
float L2_dcl = ta.lowest(low, int(len1_dcl))[int(len1_dcl)]
float N2_dcl = (H2_dcl - L2_dcl) / len1_dcl
float H3_dcl = ta.highest(high, len_dcl)
float L3_dcl = ta.lowest(low, len_dcl)
float N3_dcl = (H3_dcl - L3_dcl) / len_dcl
float dimen1_dcl = (math.log(N1_dcl + N2_dcl) - math.log(N3_dcl)) / math.log(2)
float dimen_dcl = (N1_dcl > 0 and N2_dcl > 0 and N3_dcl > 0) ? dimen1_dcl : 0.0
float alpha1_dcl = math.exp(w * (dimen_dcl - 1))
float oldalpha_dcl = alpha1_dcl > 1 ? 1 : (alpha1_dcl < 0.01 ? 0.01 : alpha1_dcl)
float oldN_dcl = (2 - oldalpha_dcl) / oldalpha_dcl
float N_val_dcl = (((framaSC - framaFC) * (oldN_dcl - 1)) / (framaSC - 1)) + framaFC
float alpha__dcl = 2 / (N_val_dcl + 1)
float alpha_dcl  = alpha__dcl < 2 / (framaSC + 1) ? 2 / (framaSC + 1) : (alpha__dcl > 1 ? 1 : alpha__dcl)
frama_val_dcl := (1 - alpha_dcl) * nz(frama_val_dcl[1]) + alpha_dcl * src

// Weekly Cycle FRAMA Calculation
int len_wcl = math.round(frama_period_wcl)
float len1_wcl = len_wcl / 2.0
float H1_wcl = ta.highest(high, int(len1_wcl))
float L1_wcl = ta.lowest(low, int(len1_wcl))
float N1_wcl = (H1_wcl - L1_wcl) / len1_wcl
float H2_wcl = ta.highest(high, int(len1_wcl))[int(len1_wcl)]
float L2_wcl = ta.lowest(low, int(len1_wcl))[int(len1_wcl)]
float N2_wcl = (H2_wcl - L2_wcl) / len1_wcl
float H3_wcl = ta.highest(high, len_wcl)
float L3_wcl = ta.lowest(low, len_wcl)
float N3_wcl = (H3_wcl - L3_wcl) / len_wcl
float dimen1_wcl = (math.log(N1_wcl + N2_wcl) - math.log(N3_wcl)) / math.log(2)
float dimen_wcl = (N1_wcl > 0 and N2_wcl > 0 and N3_wcl > 0) ? dimen1_wcl : 0.0
float alpha1_wcl = math.exp(w * (dimen_wcl - 1))
float oldalpha_wcl = alpha1_wcl > 1 ? 1 : (alpha1_wcl < 0.01 ? 0.01 : alpha1_wcl)
float oldN_wcl = (2 - oldalpha_wcl) / oldalpha_wcl
float N_val_wcl = (((framaSC - framaFC) * (oldN_wcl - 1)) / (framaSC - 1)) + framaFC
float alpha__wcl = 2 / (N_val_wcl + 1)
float alpha_wcl  = alpha__wcl < 2 / (framaSC + 1) ? 2 / (framaSC + 1) : (alpha__wcl > 1 ? 1 : alpha__wcl)
frama_val_wcl := (1 - alpha_wcl) * nz(frama_val_wcl[1]) + alpha_wcl * src

plot(show_FRAMA ? frama_val_dcl : na, title="FRAMA DCL", color=color.yellow)
plot(show_FRAMA ? frama_val_wcl : na, title="FRAMA WCL", color=color.blue)

// ============================================================================
// 16. T3 Normalisation for WCL Momentum Checking (Hidden)
// ============================================================================
t3subject   = f_t3(t3Source, t3Length, t3VolFactor)
float t3lowest  = ta.lowest(t3subject, t3NormPeriod)
float t3highest = ta.highest(t3subject, t3NormPeriod)
float t3_norm   = (t3subject - t3lowest) / math.max(t3highest - t3lowest, 1e-6) - 0.50
bool t3InBrightRed = (t3_norm <= -0.4)
var bool wasInBrightRed       = false
var bool t3MomentumBottomed   = false
if t3InBrightRed
    if t3MomentumBottomed
        t3MomentumBottomed := false
    wasInBrightRed := true
else
    if wasInBrightRed
        t3MomentumBottomed := true
    wasInBrightRed := false

exitOS = (not t3InBrightRed) and (t3InBrightRed[1])
plotshape(show_T3Exit and exitOS, title="Exit OS", style=shape.circle, location=location.belowbar, color=color.green, size=size.normal, transp=0)

// ============================================================================
// 17. Method 1 Revised Implementation – Alternative for Very Bullish Conditions
//     (Using a red sequence of exactly 3 (or more) bars and requiring confirmation
//      by 2 consecutive green bars)
// ============================================================================

// --- User Inputs for Method 1 ---
updownGroup    = "UpDown Test"
redBarTarget_M1 = input.int(3, title="Red Bar Target for Method 1", minval=1, group=updownGroup)
magThreshold_M1 = input.int(2, title="Green Signal Magnitude for Method 1", minval=1, group=updownGroup)
showM1_New      = input.bool(true, title="Show Method 1 Signals", group=updownGroup)

// --- Price Condition Definitions ---
dopm    = input.bool(true, title="Use Midpoint (else use Prev Close)", group=updownGroup)
hl2_val = (high + low) / 2
greenCond = dopm ? (close > hl2_val[1]) : (close > close[1])
redCond   = dopm ? (close < hl2_val[1]) : (close < close[1])
outsidePredictedWCL = true  // maintained for consistency with further logic

// --- Persistent State Variables for Method 1 ---
var int   redCount_M1       = 0
var int   greenCount_M1     = 0
var bool  inConfirmation_M1 = false
var bool  m1_signal         = false

// --- Revised Method 1 Logic ---
// If the current bar is red, increment red counter and cancel any confirmation
if redCond
    redCount_M1    := nz(redCount_M1[1]) + 1
    greenCount_M1  := 0
    // If a red appears during confirmation, cancel the confirmation phase
    if inConfirmation_M1
        inConfirmation_M1 := false
    m1_signal := false

// If the current bar is green, handle accordingly
else if greenCond
    // If not already in confirmation and the previous bar was red,
    // check if the red sequence meets the required target to start confirmation.
    if not inConfirmation_M1
        if nz(redCount_M1[1]) >= redBarTarget_M1
            // Start confirmation phase
            inConfirmation_M1 := true
            greenCount_M1     := 1
            m1_signal         := false
        else
            // Red sequence was too short; reset counters
            redCount_M1   := 0
            greenCount_M1 := 0
            m1_signal     := false
    // If already in confirmation, count consecutive green bars.
    else
        // Ensure that only consecutive green bars count.
        if not greenCond[1]
            greenCount_M1 := 1  // reset count if previous bar was not green
        else
            greenCount_M1 := nz(greenCount_M1[1]) + 1
        
        // When the required number of consecutive green bars is reached, trigger signal.
        if greenCount_M1 >= magThreshold_M1
            m1_signal := true
            // Reset all counters and exit confirmation after the signal fires
            inConfirmation_M1 := false
            redCount_M1       := 0
            greenCount_M1     := 0
        else
            m1_signal := false
else
    // If neither condition is met, do not fire the signal
    m1_signal := false

// --- Plot the Method 1 Signal ---
// This plots an upward triangle when m1_signal is true.
plotshape(showM1_New and m1_signal, title="M1 Signal", style=shape.triangleup, location=location.belowbar, color=color.green, size=size.tiny)
x
// ============================================================================
// 18. Method 2 Implementation – Primary Signal (for WCL conditions)
//     (Requires a finished red sequence of at least 5 red bars, then confirmation by 2 green bars)
// ============================================================================

// --- User Inputs for Method 2 ---
// (These inputs will appear in your existing "UpDown Test" group)
yellowLine   = input.int(5, title="Yellow Threshold (min red bars)", minval=1, group=updownGroup)
magThreshold = input.int(2, title="Green Signal Magnitude", minval=1, group=updownGroup)
showM2_New   = input.bool(true, title="Show Method 2 Signals", group=updownGroup)

// --- Persistent State Variables for Method 2 ---
// These variables are used only for Method 2.
var int  redCount         = 0
var int  greenCount       = 0
var bool inConfirmation   = false
var int  interruptRedCount = 0
var bool m2_signal         = false

// --- Process Each Bar for Method 2 ---
if redCond
    if not inConfirmation
        // Accumulate red bars if not in confirmation.
        redCount := nz(redCount[1]) + 1
        greenCount := 0
        interruptRedCount := 0
        m2_signal := false
    else
        // In confirmation phase, a red bar is considered an interruption.
        interruptRedCount := nz(interruptRedCount[1]) + 1
        if interruptRedCount >= 2
            // If two consecutive red bars occur during confirmation, cancel the pending confirmation.
            inConfirmation := false
            redCount       := 1  // Start a new red sequence with the current red bar.
            greenCount     := 0
            interruptRedCount := 0
            m2_signal := false
        else
            m2_signal := false
else if greenCond
    if redCond[1] and not inConfirmation
        // When a green bar occurs immediately following a red bar (red sequence ended) and not yet in confirmation:
        if nz(redCount[1]) >= yellowLine
            // If the finalized red sequence is at least the yellow threshold, enter confirmation.
            inConfirmation := true
            greenCount := 1  // Start counting green bars with this green bar.
            m2_signal := false
        else
            // If the red sequence was too short, reset.
            redCount := 0
            greenCount := 0
            m2_signal := false
        interruptRedCount := 0
    else if inConfirmation
        // If already in confirmation, increment the green counter.
        greenCount := nz(greenCount[1]) + 1
        // Reset any interruption count.
        interruptRedCount := 0
        m2_signal := false
    else
        // Otherwise, ensure green counter is reset.
        greenCount := 0
        m2_signal := false
else
    m2_signal := false

// --- Signal Firing for Method 2 ---
// Fire the signal on a green bar if in confirmation and the current greenCount equals the confirmation threshold.
if inConfirmation and greenCond and (greenCount >= magThreshold)
    m2_signal := true
    // Reset state after the signal fires.
    inConfirmation := false
    redCount       := 0
    greenCount     := 0
    interruptRedCount := 0

// --- Plot the Method 2 Signal ---
// Plot an upward tiny red triangle at the bar's low when m2_signal is true.
plotshape(showM2_New and m2_signal, title="M2 Signal", style=shape.triangleup, location=location.belowbar, color=color.red, size=size.tiny)

// ============================================================================
// 19. Integrated Long Entry Signal (Longs Only, No Exit Logic) with FRAMA Delay
// ============================================================================
groupConfirm = "Confirmation Options"
use_frama_confirm = input.bool(true, title="Use FRAMA Confirmation", group=groupConfirm)
use_lw_confirm    = input.bool(true, title="Use Larry Williams Confirmation", group=groupConfirm)
use_ud_confirm    = input.bool(true, title="Use Up/Down Confirmation", group=groupConfirm)
frama_choice = input.string("DCL", title="Select FRAMA Confirmation Line", options=["DCL", "WCL"], group=groupConfirm)
f_frama_confirm = frama_choice == "DCL" ? frama_val_dcl : frama_val_wcl

bool combined_long_entry = true
if use_ud_confirm
    combined_long_entry := combined_long_entry and (math.sum((m1_signal or m2_signal) ? 1 : 0, 5) > 0)
if use_frama_confirm
    if frama_choice == "WCL"
        combined_long_entry := combined_long_entry and (close > f_frama_confirm) and (math.sum(high < f_frama_confirm ? 1 : 0, 5) > 0)
    else
        combined_long_entry := combined_long_entry and (close > f_frama_confirm) and (math.sum(close < f_frama_confirm ? 1 : 0, 5) > 0)
if use_lw_confirm
    combined_long_entry := combined_long_entry and lwLong

plotshape(combined_long_entry and not combined_long_entry[1], title="Long Entry Signal", style=shape.labelup, 
     location=location.belowbar, text="Long", color=color.green, size=size.tiny)
